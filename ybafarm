loadstring((function(b64) local chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; local result = ''; local val = 0; local valb = -8; for i = 1, #b64 do local c = b64:sub(i,i); if c ~= '=' then local pos = chars:find(c) - 1; val = val * 64 + pos; valb = valb + 6; if valb >= 0 then result = result .. string.char(math.floor(val / 2^valb) % 256); val = val % 2^valb; valb = valb - 8; end; end; end; return result; end)("bG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCmxvY2FsIFJlcGxpY2F0ZWRTdG9yYWdlID0gZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpCgpsb2NhbCBQbGF5ZXIgPSBQbGF5ZXJzLkxvY2FsUGxheWVyCmxvY2FsIENoYXJhY3RlciA9IFBsYXllci5DaGFyYWN0ZXIgb3IgUGxheWVyLkNoYXJhY3RlckFkZGVkOldhaXQoKQpsb2NhbCBIUlAgPSBDaGFyYWN0ZXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKbG9jYWwgSHVtYW5vaWQgPSBDaGFyYWN0ZXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZCIpCgpnZXRnZW52KCkuU3R1ZmYgPSB7CiAgICBUZWxlcG9ydEJ5cGFzcyA9IHRydWUsCiAgICBJdGVtTWFnbml0dWRlQnlwYXNzID0gdHJ1ZSwKICAgIENyYXNoQnlwYXNzID0gdHJ1ZSwKICAgIEF1dG9GYXJtID0gdHJ1ZSwKICAgIEF1dG9TZWxsID0gdHJ1ZSwKICAgIFB1cmNoYXNlTHVja3kgPSB0cnVlCn0KCmxvY2FsIGJsYWNrbGlzdCA9IHsiRGlzYyIsIkJvbmUiLCJBcm0iLCJVbWJyZWxsYSIsIlNjeXRoZSIsIlNjeXRoIiwiUGx1Y2siLCJMaWdoIiwiVGVhIiwiQm93IiwiS29pY2hpIiwiUmVxdWllbSIsIkJhYnkiLCJSZWRlbW1lZCIsIkx1Y2t5IiwiTHVjayJ9Cgpsb2NhbCBmdW5jdGlvbiBpc0JsYWNrbGlzdGVkKHRvb2xOYW1lKQogICAgZm9yIF8sd29yZCBpbiBpcGFpcnMoYmxhY2tsaXN0KSBkbwogICAgICAgIGlmIHN0cmluZy5maW5kKHRvb2xOYW1lLCB3b3JkKSB0aGVuCiAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHJldHVybiBmYWxzZQplbmQKCmxvY2FsIGZ1bmN0aW9uIFRlbGVwb3J0QnlwYXNzKCkKICAgIGlmIGdldGdlbnYoKS5TdHVmZi5UZWxlcG9ydEJ5cGFzcyB0aGVuCiAgICAgICAgbG9jYWwgT2xkTmFtZWNhbGxUUAogICAgICAgIE9sZE5hbWVjYWxsVFAgPSBob29rbWV0YW1ldGhvZChnYW1lLCAiX19uYW1lY2FsbCIsIGZ1bmN0aW9uKHNlbGYsIC4uLikKICAgICAgICAgICAgbG9jYWwgYXJncyA9IHsuLi59CiAgICAgICAgICAgIGxvY2FsIG1ldGhvZCA9IGdldG5hbWVjYWxsbWV0aG9kKCkKICAgICAgICAgICAgaWYgbWV0aG9kID09ICJJbnZva2VTZXJ2ZXIiIGFuZCBhcmdzWzFdID09ICJpZGtsb2xicmFoMmRlIiB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gIiAgX19fWFAgREUgS0VZIgogICAgICAgICAgICBlbmQKICAgICAgICAgICAgcmV0dXJuIE9sZE5hbWVjYWxsVFAoc2VsZiwgLi4uKQogICAgICAgIGVuZCkKICAgIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIEl0ZW1NYWduaXR1ZGVCeXBhc3MoKQogICAgaWYgZ2V0Z2VudigpLlN0dWZmLkl0ZW1NYWduaXR1ZGVCeXBhc3MgdGhlbgogICAgICAgIGxvY2FsIE9sZEluZGV4SXRlbQogICAgICAgIE9sZEluZGV4SXRlbSA9IGhvb2ttZXRhbWV0aG9kKFBsYXllci5DaGFyYWN0ZXIuUHJpbWFyeVBhcnQuUG9zaXRpb24sICJfX2luZGV4IiwgZnVuY3Rpb24oc2VsZiwga2V5KQogICAgICAgICAgICBpZiBub3QgY2hlY2tjYWxsZXIoKSBhbmQga2V5Omxvd2VyKCkgPT0gIm1hZ25pdHVkZSIgYW5kIGdldGNhbGxpbmdzY3JpcHQoKS5OYW1lID09ICJJdGVtU3Bhd24iIHRoZW4KICAgICAgICAgICAgICAgIHJldHVybiAwCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICByZXR1cm4gT2xkSW5kZXhJdGVtKHNlbGYsIGtleSkKICAgICAgICBlbmQpCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBDcmFzaEJ5cGFzcygpCiAgICBpZiBnZXRnZW52KCkuU3R1ZmYuQ3Jhc2hCeXBhc3MgdGhlbgogICAgICAgIGxvY2FsIEZ1bmN0aW9uTGlicmFyeSA9IHJlcXVpcmUoUmVwbGljYXRlZFN0b3JhZ2U6V2FpdEZvckNoaWxkKCJNb2R1bGVzIikuRnVuY3Rpb25MaWJyYXJ5KQogICAgICAgIGxvY2FsIE9sZFBjYWxsID0gRnVuY3Rpb25MaWJyYXJ5LnBjYWxsCiAgICAgICAgRnVuY3Rpb25MaWJyYXJ5LnBjYWxsID0gZnVuY3Rpb24oLi4uKQogICAgICAgICAgICBsb2NhbCBmID0gLi4uCiAgICAgICAgICAgIGlmIHR5cGUoZikgPT0gImZ1bmN0aW9uIiBhbmQgI2dldHVwdmFsdWVzKGYpID09IDExIHRoZW4KICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICBlbmQKICAgICAgICAgICAgcmV0dXJuIE9sZFBjYWxsKC4uLikKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIFJhbmRvbUVxdWlwVG9vbCgpCiAgICBzcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLlN0dWZmLkF1dG9GYXJtIGFuZCBDaGFyYWN0ZXIgYW5kIEh1bWFub2lkIGRvCiAgICAgICAgICAgIGxvY2FsIEJhY2twYWNrID0gUGxheWVyOkZpbmRGaXJzdENoaWxkKCJCYWNrcGFjayIpCiAgICAgICAgICAgIGlmIEJhY2twYWNrIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIHRvb2xzID0ge30KICAgICAgICAgICAgICAgIGZvciBfLHYgaW4gaXBhaXJzKEJhY2twYWNrOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgdjpJc0EoIlRvb2wiKSBhbmQgbm90IGlzQmxhY2tsaXN0ZWQodi5OYW1lKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydCh0b29scyx2KQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBpZiAjdG9vbHM+MCB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgdG9vbCA9IHRvb2xzW21hdGgucmFuZG9tKDEsI3Rvb2xzKV0KICAgICAgICAgICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIEh1bWFub2lkOkVxdWlwVG9vbCh0b29sKQogICAgICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgdGFzay53YWl0KDEpCiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKbG9jYWwgZnVuY3Rpb24gQXV0b1NlbGwoKQogICAgc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5TdHVmZi5BdXRvU2VsbCBkbwogICAgICAgICAgICBsb2NhbCBMaXZpbmcgPSB3b3Jrc3BhY2U6RmluZEZpcnN0Q2hpbGQoIkxpdmluZyIpCiAgICAgICAgICAgIGlmIExpdmluZyB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBUYXJnZXQgPSBMaXZpbmc6RmluZEZpcnN0Q2hpbGQoUGxheWVyLk5hbWUpCiAgICAgICAgICAgICAgICBpZiBUYXJnZXQgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIEV2ZW50ID0gVGFyZ2V0OkZpbmRGaXJzdENoaWxkKCJSZW1vdGVFdmVudCIpCiAgICAgICAgICAgICAgICAgICAgaWYgRXZlbnQgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudDpGaXJlU2VydmVyKCJFbmREaWFsb2d1ZSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOUEMgPSAiTWVyY2hhbnQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9wdGlvbiA9ICJPcHRpb24yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEaWFsb2d1ZSA9ICJEaWFsb2d1ZTUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHRhc2sud2FpdCgzKQogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmxvY2FsIGZ1bmN0aW9uIEF1dG9GYXJtSXRlbXMoKQogICAgaWYgZ2V0Z2VudigpLlN0dWZmLkF1dG9GYXJtIHRoZW4KICAgICAgICBzcGF3bihmdW5jdGlvbigpCiAgICAgICAgICAgIHdoaWxlIGdldGdlbnYoKS5TdHVmZi5BdXRvRmFybSBhbmQgQ2hhcmFjdGVyIGFuZCBIUlAgZG8KICAgICAgICAgICAgICAgIGxvY2FsIGl0ZW1zID0gd29ya3NwYWNlLkl0ZW1fU3Bhd25zLkl0ZW1zOkdldENoaWxkcmVuKCkKICAgICAgICAgICAgICAgIGlmICNpdGVtcyA9PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICBIUlAuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygyOTgsIC0zMywgMTY1KQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGZvciBfLCBJdGVtIGluIHBhaXJzKGl0ZW1zKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBpZiBJdGVtOklzQSgiTW9kZWwiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBQcm9tcHQgPSBJdGVtOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiUHJveGltaXR5UHJvbXB0IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIFByb21wdCBhbmQgUHJvbXB0Lk1heEFjdGl2YXRpb25EaXN0YW5jZSB+PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIUlAuQ0ZyYW1lID0gSXRlbS5QcmltYXJ5UGFydC5DRnJhbWUgKyBWZWN0b3IzLm5ldygwLCAzLCAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCgwLjYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJlcHJveGltaXR5cHJvbXB0KFByb21wdCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDAuNCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgdGFzay53YWl0KDAuMSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gQXV0b1B1cmNoYXNlTHVja3lBcnJvdygpCiAgICBzcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLlN0dWZmLlB1cmNoYXNlTHVja3kgZG8KICAgICAgICAgICAgbG9jYWwgTGl2aW5nID0gd29ya3NwYWNlOkZpbmRGaXJzdENoaWxkKCJMaXZpbmciKQogICAgICAgICAgICBpZiBMaXZpbmcgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgVGFyZ2V0ID0gTGl2aW5nOkZpbmRGaXJzdENoaWxkKFBsYXllci5OYW1lKQogICAgICAgICAgICAgICAgaWYgVGFyZ2V0IHRoZW4KICAgICAgICAgICAgICAgICAgICBsb2NhbCBFdmVudCA9IFRhcmdldDpGaW5kRmlyc3RDaGlsZCgiUmVtb3RlRXZlbnQiKQogICAgICAgICAgICAgICAgICAgIGlmIEV2ZW50IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnQ6RmlyZVNlcnZlcigiUHVyY2hhc2VTaG9wSXRlbSIsIHsgWyJJdGVtTmFtZSJdID0gIjF4IEx1Y2t5IEFycm93IiB9KQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICB0YXNrLndhaXQoMikKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpUZWxlcG9ydEJ5cGFzcygpCkl0ZW1NYWduaXR1ZGVCeXBhc3MoKQpDcmFzaEJ5cGFzcygpCkF1dG9GYXJtSXRlbXMoKQpSYW5kb21FcXVpcFRvb2woKQpBdXRvU2VsbCgpCkF1dG9QdXJjaGFzZUx1Y2t5QXJyb3coKQoKUGxheWVyLkNoYXJhY3RlckFkZGVkOkNvbm5lY3QoZnVuY3Rpb24obmV3Q2hhcikKICAgIENoYXJhY3RlciA9IG5ld0NoYXIKICAgIEhSUCA9IG5ld0NoYXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgIEh1bWFub2lkID0gbmV3Q2hhcjpXYWl0Rm9yQ2hpbGQoIkh1bWFub2lkIikKICAgIEF1dG9GYXJtSXRlbXMoKQogICAgUmFuZG9tRXF1aXBUb29sKCkKICAgIEF1dG9TZWxsKCkKICAgIEF1dG9QdXJjaGFzZUx1Y2t5QXJyb3coKQplbmQpCg=="))()
